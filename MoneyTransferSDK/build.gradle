plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlinx-serialization'
    id 'maven-publish'
    id 'org.jetbrains.kotlinx.kover' version '0.7.6'
}

group = 'com.github.moneytransfersdk'

android {
    namespace 'io.finbridge.vepay.moneytransfersdk'
    compileSdk 34

    publishing {
        multipleVariants {
            allVariants()
            withJavadocJar()
            withSourcesJar()
        }
    }

    defaultConfig {
        minSdk 24
        targetSdk 34

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    //Core
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'

    //Material
    implementation 'com.google.android.material:material:1.11.0'

    //UI
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.fragment:fragment-ktx:1.6.2'

    //Lifecycle
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'

    //Ktor
    implementation "io.ktor:ktor-client-android:2.3.7"
    implementation "io.ktor:ktor-client-okhttp:2.3.7"
    implementation "io.ktor:ktor-client-content-negotiation:2.3.7"
    implementation "io.ktor:ktor-serialization-kotlinx-json:2.3.7"
    implementation "io.ktor:ktor-client-logging-jvm:2.3.7"
    implementation "io.ktor:ktor-client-json:2.3.7"

    //Hilt
    implementation 'com.google.dagger:hilt-android:2.45'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt 'com.google.dagger:hilt-compiler:2.45'

    //Test
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    testImplementation "io.ktor:ktor-client-mock:2.2.4"
    androidTestImplementation "io.mockk:mockk-agent:1.13.4"
    testApi "io.mockk:mockk-android:1.13.4"

    //Tinkoff decoro
    implementation 'ru.tinkoff.decoro:decoro:1.5.0'

    //Card scanner
    implementation 'io.card:android-sdk:5.5.1'

    //NFC scanner
    implementation 'com.github.devnied.emvnfccard:library:3.0.1'
    
    //Arrow
    implementation 'io.arrow-kt:arrow-core:1.2.0'
    implementation 'io.arrow-kt:arrow-fx-stm:1.2.0'
    implementation 'io.arrow-kt:arrow-fx-coroutines:1.2.0'
}


koverReport {
    // filters for all reports in all variants
    filters {
        excludes {
            // excludes class by fully-qualified JVM class name, wildcards '*' and '?' are available
            classes("com.*")
        }
    }

    // verification rules for verification tasks in all variants
    verify {
        // add common verification rule
        rule {
            // check this rule during verification
            it.enabled = true
           // isEnabled = true

            // specify the code unit for which coverage will be aggregated
            entity = kotlinx.kover.gradle.plugin.dsl.GroupingEntityType.APPLICATION

            // overriding filters only for current rule
            filters {}

            // specify verification bound for this rule
            bound {
                // lower bound
                minValue = 0

                // upper bound
                maxValue = 99

                // specify which units to measure coverage for
                metric = kotlinx.kover.gradle.plugin.dsl.MetricType.LINE

                // specify an aggregating function to obtain a single value that will be checked against the lower and upper boundaries
                aggregation = kotlinx.kover.gradle.plugin.dsl.AggregationType.COVERED_PERCENTAGE
            }

            // add lower bound for percentage of covered lines
            minBound(0)

            // add upper bound for percentage of covered lines
            maxBound(98)
        }
    }

    // configure report for `debug` build variant (Build Type + Flavor) - generated by tasks `koverXmlReportDebug`, `koverHtmlReportdebug` etc
    androidReports("debug") {
        // filters for all reports of `debug` build variant
        filters {}

        // configure XML report for `debug` build variant (task `koverXmlReportDebug`)
        xml {
            //  generate an XML report when running the `check` task
            onCheck = false

            // XML report file
            setReportFile(layout.buildDirectory.file("cc-report.xml"))

            // overriding filters only for the XML report
            filters {}
        }

        // configure verification for `debug` build variant (task `koverVerifyDebug`)
        verify {
            //  verify coverage when running the `check` task
            onCheck = true

            // add verification rule
            rule {
                // check this rule during verification
                it.enabled = true
                // isEnabled = true

                // specify the code unit for which coverage will be aggregated
                entity = kotlinx.kover.gradle.plugin.dsl.GroupingEntityType.APPLICATION

                // overriding filters only for current rule
                filters {}

                // specify verification bound for this rule
                bound {
                    // lower bound
                    minValue = 0

                    // upper bound
                    maxValue = 99

                    // specify which units to measure coverage for
                    metric = kotlinx.kover.gradle.plugin.dsl.MetricType.LINE

                    // specify an aggregating function to obtain a single value that will be checked against the lower and upper boundaries
                    aggregation = kotlinx.kover.gradle.plugin.dsl.AggregationType.COVERED_PERCENTAGE
                }

                // add lower bound for percentage of covered lines
                minBound(0)

                // add upper bound for percentage of covered lines
                maxBound(98)
            }
        }

        // configure coverage logging for `debug` build variant (task `koverLogDebug`)
        log {
            //  print coverage when running the `check` task
            onCheck = true

            // overriding filters only for the logging report
            filters {}
            // Add a header line to the output before the lines with coverage
            header = null
            // Format of the strings to print coverage for the specified in `groupBy` group
            format = "<entity> line coverage: <value>%"
            // Specifies by which entity the code for separate coverage evaluation will be grouped
            groupBy = kotlinx.kover.gradle.plugin.dsl.GroupingEntityType.APPLICATION
            // Specifies which metric is used for coverage evaluation
            coverageUnits = kotlinx.kover.gradle.plugin.dsl.MetricType.LINE
            // Specifies aggregation function that will be calculated over all the elements of the same group
            aggregationForGroup = kotlinx.kover.gradle.plugin.dsl.AggregationType.COVERED_PERCENTAGE
        }
    }

    // configure report for `release` build variant (Build Type + Flavor) - generated by tasks `koverXmlReportRelease`, `koverHtmlReportRelease` etc
    androidReports("release") {
        // filters for all reports of `release` build variant
        filters {}

        // configure XML report for `release` build variant (task `koverXmlReportRelease`)
        xml {
            //  generate an XML report when running the `check` task
            onCheck = false

            // XML report file
            setReportFile(layout.buildDirectory.file("cc-report.xml"))

            // overriding filters only for the XML report
            filters {}
        }

        // configure verification for `release` build variant (task `koverVerifyRelease`)
        verify {
            //  verify coverage when running the `check` task
            onCheck = true

            // add verification rule
            rule {
                // check this rule during verification
                it.enabled = true
                // isEnabled = true

                // specify the code unit for which coverage will be aggregated
                entity = kotlinx.kover.gradle.plugin.dsl.GroupingEntityType.APPLICATION

                // overriding filters only for current rule
                filters {}

                // specify verification bound for this rule
                bound {
                    // lower bound
                    minValue = 0

                    // upper bound
                    maxValue = 99

                    // specify which units to measure coverage for
                    metric = kotlinx.kover.gradle.plugin.dsl.MetricType.LINE

                    // specify an aggregating function to obtain a single value that will be checked against the lower and upper boundaries
                    aggregation = kotlinx.kover.gradle.plugin.dsl.AggregationType.COVERED_PERCENTAGE
                }

                // add lower bound for percentage of covered lines
                minBound(0)

                // add upper bound for percentage of covered lines
                maxBound(98)
            }
        }

        // configure coverage logging for `release` build variant (task `koverLogRelease`)
        log {
            //  print coverage when running the `check` task
            onCheck = true

            // overriding filters only for the logging report
            filters {}
            // Add a header line to the output before the lines with coverage
            header = null
            // Format of the strings to print coverage for the specified in `groupBy` group
            format = "<entity> line coverage: <value>%"
            // Specifies by which entity the code for separate coverage evaluation will be grouped
            groupBy = kotlinx.kover.gradle.plugin.dsl.GroupingEntityType.APPLICATION
            // Specifies which metric is used for coverage evaluation
            coverageUnits = kotlinx.kover.gradle.plugin.dsl.MetricType.LINE
            // Specifies aggregation function that will be calculated over all the elements of the same group
            aggregationForGroup = kotlinx.kover.gradle.plugin.dsl.AggregationType.COVERED_PERCENTAGE
        }
    }
}

apply from: 'publish.gradle'
